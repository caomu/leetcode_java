//Áªô‰Ω†‰∏Ä‰∏™Áî®Â≠óÁ¨¶Êï∞ÁªÑ tasks Ë°®Á§∫ÁöÑ CPU ÈúÄË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÂàóË°®„ÄÇÂÖ∂‰∏≠ÊØè‰∏™Â≠óÊØçË°®Á§∫‰∏ÄÁßç‰∏çÂêåÁßçÁ±ªÁöÑ‰ªªÂä°„ÄÇ‰ªªÂä°ÂèØ‰ª•‰ª•‰ªªÊÑèÈ°∫Â∫èÊâßË°åÔºåÂπ∂‰∏îÊØè‰∏™‰ªªÂä°ÈÉΩÂèØ‰ª•Âú® 1 ‰∏™
//Âçï‰ΩçÊó∂Èó¥ÂÜÖÊâßË°åÂÆå„ÄÇÂú®‰ªª‰Ωï‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåCPU ÂèØ‰ª•ÂÆåÊàê‰∏Ä‰∏™‰ªªÂä°ÔºåÊàñËÄÖÂ§Ñ‰∫éÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ
//
// ÁÑ∂ËÄåÔºå‰∏§‰∏™ Áõ∏ÂêåÁßçÁ±ª ÁöÑ‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÊúâÈïøÂ∫¶‰∏∫Êï¥Êï∞ n ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåÂõ†Ê≠§Ëá≥Â∞ëÊúâËøûÁª≠ n ‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖ CPU Âú®ÊâßË°å‰∏çÂêåÁöÑ‰ªªÂä°ÔºåÊàñËÄÖÂú®ÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ
//
// ‰Ω†ÈúÄË¶ÅËÆ°ÁÆóÂÆåÊàêÊâÄÊúâ‰ªªÂä°ÊâÄÈúÄË¶ÅÁöÑ ÊúÄÁü≠Êó∂Èó¥ „ÄÇ
//
//
//
// Á§∫‰æã 1Ôºö
//
//
//ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 2
//ËæìÂá∫Ôºö8
//Ëß£ÈáäÔºöA -> B -> (ÂæÖÂëΩ) -> A -> B -> (ÂæÖÂëΩ) -> A -> B
//     Âú®Êú¨Á§∫‰æã‰∏≠Ôºå‰∏§‰∏™Áõ∏ÂêåÁ±ªÂûã‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÈó¥ÈöîÈïøÂ∫¶‰∏∫ n = 2 ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåËÄåÊâßË°å‰∏Ä‰∏™‰ªªÂä°Âè™ÈúÄË¶Å‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåÊâÄ‰ª•‰∏≠Èó¥Âá∫Áé∞‰∫ÜÔºàÂæÖÂëΩÔºâÁä∂ÊÄÅ„ÄÇ
//
// Á§∫‰æã 2Ôºö
//
//
//ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 0
//ËæìÂá∫Ôºö6
//Ëß£ÈáäÔºöÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºå‰ªª‰ΩïÂ§ßÂ∞è‰∏∫ 6 ÁöÑÊéíÂàóÈÉΩÂèØ‰ª•Êª°Ë∂≥Ë¶ÅÊ±ÇÔºåÂõ†‰∏∫ n = 0
//["A","A","A","B","B","B"]
//["A","B","A","B","A","B"]
//["B","B","B","A","A","A"]
//...
//ËØ∏Â¶ÇÊ≠§Á±ª
//
//
// Á§∫‰æã 3Ôºö
//
//
//ËæìÂÖ•Ôºötasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
//ËæìÂá∫Ôºö16
//Ëß£ÈáäÔºö‰∏ÄÁßçÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÔºö
//     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (ÂæÖÂëΩ) -> (ÂæÖÂëΩ) -> A -> (ÂæÖ
//ÂëΩ) -> (ÂæÖÂëΩ) -> A
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// 1 <= task.length <= 104
// tasks[i] ÊòØÂ§ßÂÜôËã±ÊñáÂ≠óÊØç
// n ÁöÑÂèñÂÄºËåÉÂõ¥‰∏∫ [0, 100]
//
// Related Topics Ë¥™ÂøÉÁÆóÊ≥ï ÈòüÂàó Êï∞ÁªÑ
// üëç 626 üëé 0


import java.sql.Timestamp;
import java.time.Duration;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * create time: 2021-04-22 23:09:55
 */
public class _621_TaskScheduler {

    private static final Logger logger = Logger.getLogger(_621_TaskScheduler.class.toString());
    private static final long START_TIMESTAMP = Timestamp.valueOf("2021-04-22 23:09:55").getTime();

    public static void main(String[] args) {
        long startTimeMillis = System.currentTimeMillis();
        Solution solution = new _621_TaskScheduler().new Solution();

        assert solution.leastInterval(new char[]{'A', 'A', 'A', 'B', 'B', 'B'}, 2) == 8;
        assert solution.leastInterval(new char[]{'A', 'A', 'A', 'B', 'B', 'B'}, 0) == 6;
        assert solution.leastInterval(new char[]{'A', 'A', 'A', 'A', 'A', 'A', 'B', 'C', 'D', 'E', 'F', 'G'}, 2) == 16;

        logger.log(Level.INFO, "time cost: [{0}] ms", (System.currentTimeMillis() - startTimeMillis));
        logger.log(Level.INFO, "solution cost: [{0}]", Duration.ofSeconds(
                (System.currentTimeMillis() - START_TIMESTAMP) / 1000));
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int leastInterval(char[] tasks, int n) {
            if (n == 0) {
                return tasks.length;
            }
            int[] taskMap = new int[26];
            for (char c : tasks) {
                taskMap[c - 'A']++;
            }
            Arrays.sort(taskMap);
            int leastInterval = 0;
            for (int i = n - 1; i < n; i++) {

            }
            PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(Comparator.reverseOrder());
            for (int count : taskMap) {
                priorityQueue.add(count);
            }
            return (priorityQueue.poll() - priorityQueue.poll()) * (n - 1) - n + tasks.length;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
