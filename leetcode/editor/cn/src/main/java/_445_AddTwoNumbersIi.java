//Áªô‰Ω†‰∏§‰∏™ ÈùûÁ©∫ ÈìæË°®Êù•‰ª£Ë°®‰∏§‰∏™ÈùûË¥üÊï¥Êï∞„ÄÇÊï∞Â≠óÊúÄÈ´ò‰Ωç‰Ωç‰∫éÈìæË°®ÂºÄÂßã‰ΩçÁΩÆ„ÄÇÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™Â≠òÂÇ®‰∏Ä‰ΩçÊï∞Â≠ó„ÄÇÂ∞ÜËøô‰∏§Êï∞Áõ∏Âä†‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®„ÄÇ
//
// ‰Ω†ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞Â≠óÈÉΩ‰∏ç‰ºö‰ª•Èõ∂ÂºÄÂ§¥„ÄÇ
//
//
//
// ËøõÈò∂Ôºö
//
// Â¶ÇÊûúËæìÂÖ•ÈìæË°®‰∏çËÉΩ‰øÆÊîπËØ•Â¶Ç‰ΩïÂ§ÑÁêÜÔºüÊç¢Âè•ËØùËØ¥Ôºå‰Ω†‰∏çËÉΩÂØπÂàóË°®‰∏≠ÁöÑËäÇÁÇπËøõË°åÁøªËΩ¨„ÄÇ
//
//
//
// Á§∫‰æãÔºö
//
// ËæìÂÖ•Ôºö(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 8 -> 0 -> 7
//
// Related Topics ÈìæË°®
// üëç 355 üëé 0


import com.caomu.util.ListNode;

import java.util.Stack;
import java.util.logging.Logger;

/**
 * create time: 2021-03-21 17:50:44
 */
public class _445_AddTwoNumbersIi {

    private static final Logger logger = Logger.getLogger(_445_AddTwoNumbersIi.class.toString());

    public static void main(String[] args) {
        long startTimeMillis = System.currentTimeMillis();
        Solution solution = new _445_AddTwoNumbersIi().new Solution();

        // assert solution == ;
        logger.warning(String.valueOf(solution));

        logger.info("time cost: [" + (System.currentTimeMillis() - startTimeMillis) + "] ms");
    }

    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode(int x) { val = x; }
     * }
     */
    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            Stack<Integer> stack1 = new Stack();
            ListNode node = l1;
            while (node != null) {
                stack1.add(node.val);
                node = node.next;
            }
            Stack<Integer> stack2 = new Stack();
            node = l2;
            while (node != null) {
                stack2.add(node.val);
                node = node.next;
            }
            boolean isCarray = false;
            Stack<Integer> sum = new Stack<>();
            while (!stack1.isEmpty() || !stack2.isEmpty()) {
                int s = (stack1.isEmpty() ? 0 : stack1.pop()) + (stack2.isEmpty() ? 0 : stack2.pop()) +
                        (isCarray ? 1 : 0);
                isCarray = s > 9;
                sum.push(s % 10);
            }
            if (isCarray) {
                sum.push(1);
            }
            ListNode l3 = new ListNode(sum.pop());
            node = l3;
            while (!sum.isEmpty()) {
                ListNode next = new ListNode(sum.pop());
                node.next = next;
                node = next;
            }
            return l3;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
